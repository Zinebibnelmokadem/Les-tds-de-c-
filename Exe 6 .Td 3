#include <iostream>
#include<vector>

using namespace std;

class vect
{ protected : // en prévision d'une éventuelle classe dérivée
int nelem ; // nombre d'éléments
int * adr ; // adresse zone dynamique contenant les éléments
public :
vect (int n): nelem(n),adr(new int[n]){}  // constructeur
~vect () {
  delete []adr;
}                                // destructeur
int & operator [] (int index) {
  if (index>=0; index<nelem){
    return adr[index];
  }
}                              // accès à un élément par son "indice"
} ;
class vectok : public vect{
 public:
 vectok  (int n):vect(n) {}
 vectok (vectok  autre):vect(autre.nelem){
  for(int i=0;i<nelem;i++){
    adr[i] = autre.adr[i];
 }
 }
 vectok  & operator [] (vectok autre) {
  if(nelem!=autre.nelem){
    delete []adr;
    nelem=autre.nelem;
    adr=new int[nelem];
    for(int i=0;i<nelem;i++){
      adr[i]=autre.adr[i];
    }

 }
 }
 int dimension(){
  return nelem;
 }
 
 };
 
 
main(){
  
  vectok v1(6);
  v1[0]=2;
  v1[1]=5;
  v1[2]=0;
  v1[3]=9;
  v1[4]=10;
  v1[5]=3;

  vectok v2=v1;
  vectok v3(4);
  v3=v2;
  cout<<"la dimension de v1 est :"<<v1. dimension()<<endl;
  cout<<"la dimension de v2 est :"<<v2. dimension()<<endl;
  cout<<"la dimension de v3 est :"<<v3. dimension()<<endl;

}
